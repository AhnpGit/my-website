// @flow

import React from 'react'
import PropTypes from 'prop-types'
import styled from 'styled-components'
import TextLabel from '../../atoms/TextLabel/TextLabel'
import { renderButton } from '../../../utils/style/mixins'
import { base } from '../../../utils/style/branding'
import Icon from '../Icon/Icon'

type ButtonProps = {
  appearance?: 'primary' | 'secondary' | 'success' | 'error' | 'close',
  type?: 'button' | 'submit' | 'reset',
  text?: string | React.Element<any>,
  icon?: string,
  iconSize?: 'xsmall' | 'small' | 'normal' | 'large' | 'xlarge',
  hasDropdown?: boolean,
  onClick: () => mixed,
}
/**
 * Buttons are generated by the renderButton mixin. This will render an object with button styling (so you can also
 * use this for a Link that needs to look like a button, but still stay semantically correct). Currently we have 5
 * button appearance: primary(default), secondary, success, error and close (to be used for modals/popups).
 */
const Button = ({ type = 'button',
                  appearance = 'primary',
                  hasDropdown = false,
                  icon,
                  iconSize = 'small',
                  text,
                  onClick}: ButtonProps) => (
  <Component type={ type } appearance={ appearance } className={ className } onClick={ onClick }>
    { icon ? <Icon name={ icon } fixedSize={ iconSize }/> : null }
    { text ? <TextLabel text={ text } /> : null }
    { hasDropdown ? <Icon name="triangle-down" fixedSize="xsmall" /> : null }
  </Component>
)

const Component = styled.button`
  ${ props => renderButton[props.appearance] || renderButton.primary };
  
  svg + span, span + svg, svg + svg {
    margin-left: ${ base.spacer };
  }
`

Button.propTypes = {
  /**
   * The classname is required by Styled Components to allow overrides of the component
   */
  className: PropTypes.string,
  /**
   * The appearance of the button. Available appearances: primary(default), secondary, success, error and close
   */
  appearance: PropTypes.oneOf(['primary', 'secondary', 'success', 'error', 'close']),
  /**
   * The type of teh button. Available options: button, submit and reset.
   */
  type: PropTypes.oneOf(['button', 'submit', 'reset']),
  /**
   * The button text
   */
  text: PropTypes.string,
  /**
   * This will render an icon on the button (not for dropdown arrows)
   */
  icon: PropTypes.string,
  /**
   * Set the size of the icon. Options: xsmall(8px), small(16px), normal(32px), large(48px), xlarge(64px). Size are
   * controlled in the branding util.
   */
  iconSize: PropTypes.oneOf(['xsmall', 'small', 'normal', 'large', 'xlarge']),
  /**
   * Boolean value that will render a dropdown triangle when set to true.
   */
  hasDropdown: PropTypes.bool,
  /**
   * The onClick parameter makes it possible to add events to the component
   */
  onClick: PropTypes.func.isRequired,
}

export default Button
